openapi: 3.0.0
info:
  version: "2.1.3"
  title: "Unicorn API"
  description: "API for managing unicorn."
servers:
  - url: https://api-stub-server-384446500375.asia-east1.run.app/
    description: "Backend server"

components:
  #  securitySchemes:
  #    firebase:
  #      type: oauth2
  #      flows:
  #        implicit:
  #          authorizationUrl: ""
  #      x-google-issuer: "https://securetoken.google.com/xxxx"
  #      x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com"
  #      x-google-audiences: "xxxx"

  schemas:
    FirebaseAccountRequest:
      type: object
      properties:
        email:
          type: string
          description: "User Email"
          example: "test@test.com"
        password:
          type: string
          description: "User Password"
          example: "password"
    FirebaseAccountResponse:
      type: object
      properties:
        uid:
          type: string
          description: "User ID"
          example: "1234567890"
        email:
          type: string
          description: "User Email"
          example: "test@test.com"
        password:
          type: string
          description: "User Password"
          example: "password"

    Emergency:
      type: object
      properties:
        userID:
          type: string
          description: "ユーザーID"
          example: "1234567890"
        userLatitude:
          type: number
          description: "ユーザーの緯度"
          example: 35.681236
        userLongitude:
          type: number
          description: "ユーザーの経度"
          example: 139.767125

    Moving:
      type: object
      properties:
        userID:
          type: string
          description: "ユーザーID"
          example: "1234567890"
        robotLatitude:
          type: number
          description: "ロボットの緯度"
          example: 35.681236
        robotLongitude:
          type: number
          description: "ロボットの経度"
          example: 139.767125
    Arrival:
      type: object
      properties:
        userID:
          type: string
          description: "ユーザーID"
          example: "1234567890"
        robotLatitude:
          type: number
          description: "ロボットの緯度"
          example: 35.681236
        robotLongitude:
          type: number
          description: "ロボットの経度"
          example: 139.767125
    Complete:
      type: object
      properties:
        robotSupportID:
          type: string
          description: "ロボットサポートID(WSから取得できるUUID)"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        userID:
          type: string
          description: "ユーザーID"
          example: "1234567890"

    Robot:
      type: object
      properties:
        robotID:
          type: string
          description: "Robot ID"
          example: "1234567890"
        robotName:
          type: string
          description: "Robot Name"
          example: "Unicorn"
        status:
          type: string
          description: "Robot Status"
          enum: ["robot_waiting", "supporting", "shutdown"]
          example: "robot_waiting"

    RobotRequest:
      type: object
      properties:
        robotName:
          type: string
          description: "Robot Name"
          example: "Unicorn"

    RobotResponse:
      type: object
      properties:
        robotName:
          type: string
          description: "Robot Name"
          example: "Unicorn"

    RobotPowerRequest:
      type: object
      properties:
        status:
          type: string
          description: "Robot Status"
          enum: ["robot_waiting", "shutdown"]
          example: "robot_waiting"

    HospitalNews:
      type: object
      properties:
        hospitalNewsID:
          type: string
          description: "病院お知らせUUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        hospitalID:
          type: string
          description: "病院UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        hospitalName:
          type: string
          description: "病院名"
          example: "東京都立大学病院"
        title:
          type: string
          description: "お知らせタイトル"
          example: "新型コロナウイルス対策について"
        contents:
          type: string
          description: "お知らせ内容"
          example: "新型コロナウイルスの感染拡大に伴い、当院では以下の対策を行っております。"
        noticeImageUrl:
          type: string
          description: "お知らせ画像URL"
          example: "https://placehold.jp/150x150.png"
        relatedUrl:
          type: string
          description: "関連URL"
          example: "https://www.hospital.com/news/1"
        postedDate:
          type: string
          description: "お知らせ日"
          example: "2020-01-01 00:00:00 +09:00"

    HospitalNewsRequest:
      type: object
      properties:
        hospitalID:
          type: string
          description: "病院UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        title:
          type: string
          description: "お知らせタイトル"
          example: "新型コロナウイルス対策について"
        contents:
          type: string
          description: "お知らせ内容"
          example: "新型コロナウイルスの感染拡大に伴い、当院では以下の対策を行っております。"
        noticeImageUrl:
          type: string
          description: "お知らせ画像URL"
          example: "https://placehold.jp/150x150.png"
        relatedUrl:
          type: string
          description: "関連URL"
          example: "https://www.hospital.com/news/1"

    HospitalNewsResponse:
      type: object
      properties:
        hospitalID:
          type: string
          description: "病院UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        title:
          type: string
          description: "お知らせタイトル"
          example: "新型コロナウイルス対策について"
        contents:
          type: string
          description: "お知らせ内容"
          example: "新型コロナウイルスの感染拡大に伴い、当院では以下の対策を行っております。"
        noticeImageUrl:
          type: string
          description: "お知らせ画像URL"
          example: "https://placehold.jp/150x150.png"
        relatedUrl:
          type: string
          description: "関連URL"
          example: "https://www.hospital.com/news/1"

    UserNotification:
      type: object
      properties:
        isMedicineReminder:
          type: boolean
          description: "お薬リマインダー通知"
          example: true
        isRegularHealthCheckup:
          type: boolean
          description: "定期検診"
          example: true
        isHospitalNews:
          type: boolean
          description: "新着病院お知らせ"
          example: true
    Account:
      type: object
      properties:
        uid:
          type: string
          description: "User ID"
          example: "1234567890"
        role:
          type: string
          description: "User Role"
          enum: ["user", "doctor", "robot"]
          example: "user"
        fcmTokenId:
          type: string
          description: "FCMトークンID"
          example: "fcm_token_id"

    AccountRequest:
      type: object
      properties:
        uid:
          type: string
          description: "User ID"
          example: "1234567890"
        role:
          type: string
          description: "User Role"
          enum: ["user", "doctor", "robot"]
          example: "user"
        fcmTokenId:
          type: string
          description: "FCMトークンID"
          example: "fcm_token_id"

    AccountResponse:
      type: object
      properties:
        uid:
          type: string
          description: "User ID"
          example: "1234567890"
        role:
          type: string
          description: "User Role"
          enum: ["user", "doctor", "robot"]
          example: "user"
        fcmTokenId:
          type: string
          description: "FCMトークンID"
          example: "fcm_token_id"

    UserRequest:
      type: object
      properties:
        firstName:
          type: string
          description: "ユーザーの名"
          example: "太郎"
        lastName:
          type: string
          description: "ユーザーの姓"
          example: "山田"
        email:
          type: string
          description: "ユーザーのメールアドレス"
          example: "test@test.com"
        gender:
          type: string
          description: "ユーザーの性別"
          enum: ["male", "female", "other"]
          example: "male"
        birthDate:
          type: string
          format: date
          description: "ユーザーの生年月日"
          example: "1990-01-01"
        address:
          type: string
          description: "ユーザーの住所"
          example: "東京都新宿区1-1-1"
        postalCode:
          type: string
          description: "ユーザーの郵便番号"
          example: "1234567"
        phoneNumber:
          type: string
          description: "ユーザーの電話番号"
          example: "09012345678"
        iconImageUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png
        bodyHeight:
          type: number
          description: "ユーザーの身長（cm単位）"
          example: 180.5
        bodyWeight:
          type: number
          description: "ユーザーの体重（kg単位）"
          example: 75.5
        occupation:
          type: string
          description: "ユーザーの職業"
          example: "エンジニア"

    User:
      type: object
      properties:
        userID:
          type: string
          description: "User ID"
          example: "1234567890"
        firstName:
          type: string
          description: "ユーザーの名"
          example: "太郎"
        lastName:
          type: string
          description: "ユーザーの姓"
          example: "山田"
        email:
          type: string
          description: "ユーザーのメールアドレス"
          example: "test@test.com"
        gender:
          type: string
          description: "ユーザーの性別"
          enum: ["male", "female", "other"]
          example: "male"
        birthDate:
          type: string
          format: date
          description: "ユーザーの生年月日"
          example: "1990-01-01"
        address:
          type: string
          description: "ユーザーの住所"
          example: "東京都新宿区1-1-1"
        postalCode:
          type: string
          description: "ユーザーの郵便番号"
          example: "1234567"
        phoneNumber:
          type: string
          description: "ユーザーの電話番号"
          example: "09012345678"
        iconImageUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png
        bodyHeight:
          type: number
          description: "ユーザーの身長（cm単位）"
          example: 180.5
        bodyWeight:
          type: number
          description: "ユーザーの体重（kg単位）"
          example: 75.5
        occupation:
          type: string
          description: "ユーザーの職業"
          example: "エンジニア"

    UserResponse:
      type: object
      properties:
        userID:
          type: string
          description: "User ID"
          example: "1234567890"
        firstName:
          type: string
          description: "ユーザーの名"
          example: "太郎"
        lastName:
          type: string
          description: "ユーザーの姓"
          example: "山田"
        gender:
          type: string
          description: "ユーザーの性別"
          enum: ["male", "female", "other"]
          example: "male"
        birthDate:
          type: string
          format: date
          description: "ユーザーの生年月日"
          example: "1990-01-01"
        address:
          type: string
          description: "ユーザーの住所"
          example: "東京都新宿区1-1-1"
        postalCode:
          type: string
          description: "ユーザーの郵便番号"
          example: "1234567"
        email:
          type: string
          description: "ユーザーのメールアドレス"
          example: "test@test.com"
        phoneNumber:
          type: string
          description: "ユーザーの電話番号"
          example: "09012345678"
        iconImageUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png
        bodyHeight:
          type: number
          description: "ユーザーの身長（cm単位）"
          example: 180.5
        bodyWeight:
          type: number
          description: "ユーザーの体重（kg単位）"
          example: 75.5
        occupation:
          type: string
          description: "ユーザーの職業"
          example: "エンジニア"

    HealthCheckup:
      type: object
      properties:
        healthCheckupID:
          type: string
          description: "検査結果UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        date:
          type: string
          format: date
          description: "健康診断日"
          example: "2020-01-01"
        bodyTemperature:
          type: number
          description: "体温"
          example: 36.5
        bloodPressure:
          type: string
          description: "血圧"
          example: "120/80"
        medicalRecord:
          type: string
          description: "マークダウンで表記されるカルテ情報"
          example: "## 2020年1月1日\n- 体温: 36.5\n- 血圧: 120/80\n- 診断: 軽度の風邪"

    HealthCheckupRequest:
      type: object
      properties:
        date:
          type: string
          format: date
          description: "検査日"
          example: "2020-01-01"
        bodyTemperature:
          type: number
          description: "体温"
          example: 36.5
        bloodPressure:
          type: string
          description: "血圧"
          example: "120/80"
        medicalRecord:
          type: string
          description: "マークダウンで表記されるカルテ情報"
          example: "## 2020年1月1日\n- 体温: 36.5\n- 血圧: 120/80\n- 診断: 軽度の風邪"

    HealthCheckupResponse:
      type: object
      properties:
        healthCheckupID:
          type: string
          description: "検査結果UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        date:
          type: string
          format: date
          description: "健康診断日"
          example: "2020-01-01"
        bodyTemperature:
          type: number
          description: "体温"
          example: 36.5
        bloodPressure:
          type: string
          description: "血圧"
          example: "120/80"
        medicalRecord:
          type: string
          description: "マークダウンで表記されるカルテ情報"
          example: "## 2020年1月1日\n- 体温: 36.5\n- 血圧: 120/80\n- 診断: 軽度の風邪"

    Hospital:
      type: object
      properties:
        hospitalID:
          type: string
          description: "病院UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        hospitalName:
          type: string
          description: "病院名"
          example: "東京都立大学病院"
        address:
          type: string
          description: "病院住所"
          example: "東京都新宿区1-1-1"
        postalCode:
          type: string
          description: "病院郵便番号"
          example: "1234567"
        phoneNumber:
          type: string
          description: "病院電話番号"
          example: "09012345678"
    Doctor:
      type: object
      properties:
        doctorID:
          type: string
          description: "医師ID"
          example: "1234567890"
        hospital:
          type: object
          properties:
            hospitalID:
              type: string
              description: "病院UUID"
              example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
            hospitalName:
              type: string
              description: "病院名"
              example: "東京都立大学病院"
        firstName:
          type: string
          description: "医師の名"
          example: "太郎"
        lastName:
          type: string
          description: "医師の姓"
          example: "山田"
        doctorIconUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png
        departments:
          type: array
          items:
            type: object
            properties:
              departmentName:
                type: string
                description: "診療科名"
                example: "内科"
              departmentID:
                type: string
                description: "診療科UUID"
                example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        email:
          type: string
          description: "医師メールアドレス"
          example: "sample@mail.com"
        phoneNumber:
          type: string
          description: "医師電話番号"
          example: "09012345678"
        chatSupportHours:
          type: string
          description: "チャットサポート時間"
          example: "9:00-17:00"
        callSupportHours:
          type: string
          description: "通話サポート時間"
          example: "9:00-17:00"

    DoctorRequest:
      type: object
      properties:
        hospitalID:
          type: string
          description: "病院UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        firstName:
          type: string
          description: "医師の名"
          example: "太郎"
        lastName:
          type: string
          description: "医師の姓"
          example: "山田"
        doctorIconUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png
        departments:
          type: array
          items:
            type: string
            description: "診療科UUID"
            example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        email:
          type: string
          description: "医師メールアドレス"
          example: "sample@mail.com"
        phoneNumber:
          type: string
          description: "医師電話番号"
          example: "09012345678"
        chatSupportStartHour:
          type: string
          description: "チャットサポート開始時間"
          example: "9:00"
        chatSupportEndHour:
          type: string
          description: "チャットサポート終了時間"
          example: "17:00"
        callSupportStartHour:
          type: string
          description: "通話サポート開始時間"
          example: "9:00"
        callSupportEndHour:
          type: string
          description: "通話サポート終了時間"
          example: "17:00"

    DoctorResponse:
      type: object
      properties:
        hospitalID:
          type: string
          description: "病院UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        doctorName:
          type: string
          description: "医師名"
          example: "山田 太郎"
        doctorIconUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png
        departments:
          type: array
          items:
            type: string
            description: "診療科UUID"
            example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        email:
          type: string
          description: "医師メールアドレス"
          example: "sample@mail.com"
        phoneNumber:
          type: string
          description: "医師電話番号"
          example: "09012345678"
        chatSupportStartHour:
          type: string
          description: "チャットサポート開始時間"
          example: "9:00"
        chatSupportEndHour:
          type: string
          description: "チャットサポート終了時間"
          example: "17:00"
        callSupportStartHour:
          type: string
          description: "通話サポート開始時間"
          example: "9:00"
        callSupportEndHour:
          type: string
          description: "通話サポート終了時間"
          example: "17:00"
    Department:
      type: object
      properties:
        departmentID:
          type: string

          description: "診療科UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        departmentName:
          type: string
          description: "診療科名"
          example: "内科"

    Chat:
      type: object
      properties:
        chatID:
          type: string
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        doctor:
          type: object
          properties:
            doctorID:
              type: string
              description: "医師ID"
              example: "1234567890"
            doctorIconUrl:
              type: string
              description: "画像URL"
              example: https://placehold.jp/150x150.png
            firstName:
              type: string
              description: "医師の名"
              example: "太郎"
            lastName:
              type: string
              description: "医師の姓"
              example: "山田"
        user:
          type: object
          properties:
            userID:
              type: string
              description: "ユーザーID"
              example: "1234567890"
            userIconUrl:
              type: string
              description: "画像URL"
              example: https://placehold.jp/150x150.png
            firstName:
              type: string
              description: "ユーザーの名"
              example: "太郎"
            lastName:
              type: string
              description: "ユーザーの姓"
              example: "山田"
        latestMessageText:
          type: string
          nullable: true
          description: "最新メッセージ内容"
          example: "Hello, World!"
        latestMessageSentAt:
          type: string
          nullable: true
          description: "最新メッセージ送信日時"
          format: date-time
          example: "2020-01-01T00:00:00+09:00"

    ChatRequest:
      type: object
      properties:
        doctorID:
          type: string
          description: "医師ID"
          example: "1234567890"
        userID:
          type: string
          description: "ユーザーID"
          example: "1234567890"

    ChatResponse:
      type: object
      properties:
        chatID:
          type: string
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        doctorID:
          type: string
          description: "医師ID"
          example: "1234567890"
        userID:
          type: string
          description: "ユーザーID"
          example: "1234567890"

    Message:
      type: object
      properties:
        messageID:
          type: string
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        chatID:
          type: string
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        senderID:
          type: string
          description: "送信者ID"
          example: "1234567890"
        firstName:
          type: string
          description: "送信者の名"
          example: "太郎"
        lastName:
          type: string
          description: "送信者の姓"
          example: "山田"
        iconImageUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png
        content:
          description: "メッセージ内容"
          type: string
          example: "Hello, World!"
        sentAt:
          type: string
          description: "メッセージ送信日時"
          format: date-time
          example: "2020-01-01T00:00:00+09:00"

    MessageRequest:
      type: object
      properties:
        senderID:
          type: string
          description: "送信者ID"
          example: "1234567890"
        content:
          type: string
          description: "メッセージ内容"
          example: "こんにちは"

    MessageResponse:
      type: object
      properties:
        messageID:
          type: string
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        senderID:
          type: string
          description: "送信者ID"
          example: "1234567890"
        content:
          type: string
          description: "メッセージ内容"
          example: "こんにちは"

    FamilyEmail:
      type: object
      properties:
        familyEmailID:
          type: string
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        email:
          type: string
          description: "家族メールアドレス"
          example: "sample@sample.com"
        firstName:
          type: string
          description: "家族の名"
          example: "太郎"
        lastName:
          type: string
          description: "家族の姓"
          example: "山田"
        iconImageUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png

    FamilyEmailRequest:
      type: object
      properties:
        email:
          type: string
          description: "家族メールアドレス"
          example: "sample@sample.com"
        firstName:
          type: string
          description: "家族の名"
          example: "太郎"
        lastName:
          type: string
          description: "家族の姓"
          example: "山田"
        iconImageUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png

    FamilyEmailsPostRequest:
      type: object
      properties:
        familyEmailID:
          type: string
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        email:
          type: string
          description: "家族メールアドレス"
          example: "sample@sample.com"
        firstName:
          type: string
          description: "家族の名"
          example: "太郎"
        lastName:
          type: string
          description: "家族の姓"
          example: "山田"
        iconImageUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png

    FamilyEmailResponse:
      type: object
      properties:
        familyEmailID:
          type: string
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        email:
          type: string
          description: "家族メールアドレス"
          example: "sample@sample.com"
        firstName:
          type: string
          description: "家族の名"
          example: "太郎"
        lastName:
          type: string
          description: "家族の姓"
          example: "山田"
        iconImageUrl:
          type: string
          description: "画像URL"
          example: https://placehold.jp/150x150.png

    Medicine:
      type: object
      properties:
        medicineID:
          type: string
          description: "薬のUUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        medicineName:
          type: string
          description: "薬の名前"
          example: "パラセタモール"
        count:
          type: integer
          description: "薬の初期残量"
          example: 30
        quantity:
          type: integer
          description: "薬の残量"
          example: 20
        dosage:
          type: integer
          description: 一回の服用量
          example: 3
        reminders:
          type: array
          items:
            type: object
            properties:
              reminderID:
                type: string
                description: "リマインダーUUID"
                example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              reminderTime:
                type: string

                description: "リマインダー時間"
                example: "09:00"
              reminderDayOfWeek:
                type: array
                items:
                  type: string
                  description: "リマインダー曜日"
                  example: "monday"

    MedicineReminder:
      type: object
      properties:
        fcmTokenId:
          type: string
          description: "FCMトークンID"
          example: "fcm_token_id"

    MedicinePostRequest:
      type: object
      properties:
        medicineName:
          type: string
          description: "薬の名前"
          example: "パラセタモール"
        count:
          type: integer
          description: "薬の初期残量"
          example: 30
        quantity:
          type: integer
          description: "薬の残量"
          example: 20
        dosage:
          type: integer
          description: 一回の服用量
          example: 3
        reminders:
          type: array
          items:
            type: object
            properties:
              reminderID:
                type: string
                description: "リマインダーUUID"
                example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              reminderTime:
                type: string
                description: "リマインダー時間"
                example: "09:00"
              reminderDayOfWeek:
                type: array
                items:
                  type: string
                  description: "リマインダー曜日"
                  example: "monday"

    MedicineRequest:
      type: object
      properties:
        medicineName:
          type: string
          description: "薬の名前"
          example: "パラセタモール"
        quantity:
          type: integer
          description: "薬の残量"
          example: 20
        count:
          type: integer
          description: "薬の初期残量"
          example: 30
        dosage:
          type: integer
          description: 一回の服用量
          example: 3
        reminders:
          type: array
          items:
            type: object
            properties:
              reminderID:
                type: string
                description: "リマインダーUUID"
                example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              reminderTime:
                type: string
                description: "リマインダー時間"
                example: "09:00"
              reminderDayOfWeek:
                type: array
                items:
                  type: string
                  description: "リマインダー曜日"
                  example: "monday"

    MedicineResponse:
      type: object
      properties:
        medicineID:
          type: string
          description: "薬のUUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        medicineName:
          type: string
          description: "薬の名前"
          example: "パラセタモール"
        count:
          type: integer
          description: "薬の初期残量"
          example: 30
        quantity:
          type: integer
          description: "薬の残量"
          example: 20
        dosage:
          type: integer
          description: 一回の服用量
          example: 3
        reminders:
          type: array
          items:
            type: object
            properties:
              reminderID:
                type: string
                description: "リマインダーUUID"
                example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
              reminderTime:
                type: string
                description: "リマインダー時間"
                example: "09:00"
              reminderDayOfWeek:
                type: array
                items:
                  type: string
                  description: "リマインダー曜日"
                  example: "monday"

    Disease:
      type: object
      properties:
        diseaseID:
          type: integer
          description: "病気ID"
          example: 1
        diseaseName:
          type: string
          description: "病気名"
          example: "高血圧"

    ChronicDisease:
      type: object
      properties:
        chronicDiseaseID:
          type: string
          description: "持病のUUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        diseaseName:
          type: string
          description: "持病名"
          example: "高血圧"

    ChronicDiseaseRequest:
      type: object
      properties:
        diseaseID:
          type: integer
          description: "病気ID"
          example: 1

    ChronicDiseaseResponse:
      type: object
      properties:
        chronicDiseaseID:
          type: string
          description: "持病のUUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        diseaseID:
          type: integer
          description: "病気ID"
          example: 1

    CallReservation:
      type: object
      properties:
        callReservationID:
          type: string
          description: "通話予約UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        doctorID:
          type: string
          description: "医師ID"
          example: "1234567890"
        userID:
          type: string
          description: "ユーザーID"
          example: "1234567890"
        callStartTime:
          type: string
          format: date-time
          description: "通話開始時間"
          example: "2024-10-12T15:00:00+09:00"
        callEndTime:
          type: string
          format: date-time
          description: "通話終了時間"
          example: "2024-10-12T15:30:00+09:00"

    CallReservationRequest:
      type: object
      properties:
        doctorID:
          type: string
          description: "医師ID"
          example: "1234567890"
        userID:
          type: string
          description: "ユーザーID"
          example: "1234567890"
        callStartTime:
          type: string
          format: date-time
          description: "通話開始時間"
          example: "2024-10-12T15:00:00+09:00"
        callEndTime:
          type: string
          format: date-time
          description: "通話終了時間"
          example: "2024-10-12T15:30:00+09:00"
    CallReservationResponse:
      type: object
      properties:
        callReservationID:
          type: string

          description: "通話予約UUID"
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        doctorID:
          type: string
          description: "医師ID"
          example: "1234567890"
        userID:
          type: string
          description: "ユーザーID"
          example: "1234567890"
        callStartTime:
          type: string
          format: date-time
          description: "通話開始時間"
          example: "2024-10-12T15:00:00+09:00"
        callEndTime:
          type: string
          format: date-time
          description: "通話終了時間"
          example: "2024-10-12T15:30:00+09:00"
    PrimaryDoctorsRequest:
      type: object
      properties:
        doctorID:
          type: string
          description: "医師ID"
          example: "1234567890"
    PrimaryDoctorsResponse:
      type: object
      properties:
        doctorID:
          type: string
          description: "医師ID"
          example: "1234567890"
tags:
  - name: app_config
    description: "ネイティブアプリ設定"
  - name: account
    description: "アカウント情報"
  - name: user
    description: "ユーザー情報"
  - name: primary_doctors
    description: "主治医情報"
  - name: health_checkup
    description: "検査情報"
  - name: hospital
    description: "病院情報"
  - name: doctor
    description: "医師情報"
  - name: department
    description: "診療科情報"
  - name: chat
    description: "チャット情報"
  - name: family_email
    description: "家族メール情報"
  - name: medicine
    description: "薬情報"
  - name: disease
    description: "病気情報"
  - name: chronic_disease
    description: "持病情報"
  - name: call
    description: "通話情報"
  - name: robot
    description: "ロボット情報"
  - name: unicorn
    description: "Unicorn要請API"

paths:
  /app_config:
    get:
      tags:
        - app_config
      summary: "アプリ設定取得"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      description: "アプリの設定情報を取得します"
      responses:
        "200":
          description: "アプリ設定取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    example: true
                  releaseBuild:
                    type: integer
                    example: 5
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /accounts:
    get:
      tags:
        - account
      summary: "アカウント情報取得"
      description: "アカウント情報を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "アカウント情報取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "404":
          description: "指定されたアカウントが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "UserNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - account
      summary: "アカウント登録"
      description: "アカウントを登録します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountRequest"
      responses:
        "200":
          description: "アカウント登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    put:
      tags:
        - account
      summary: "アカウント更新"
      description: "アカウント情報を更新します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fcmTokenId:
                  type: string
                  description: "FCMトークンID"
                  example: "fcm_token_id"
      responses:
        "200":
          description: "アカウント更新成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  fcmTokenId:
                    type: string
                    description: "FCMトークンID"
                    example: "fcm_token_id"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    delete:
      tags:
        - account
      summary: "アカウント削除"
      description: "アカウントを削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "204":
          description: "アカウント削除成功"
        "404":
          description: "指定されたアカウントが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "UserNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /accounts/{uid}:
    get:
      tags:
        - account
      summary: "アカウント情報取得"
      description: "アカウント情報を取得します。医者のみが取得できます"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: uid
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "アカウント情報取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "404":
          description: "指定されたアカウントが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "UserNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /users:
    post:
      tags:
        - user
      summary: "ユーザープロフィール登録"
      description: "ユーザーの個人情報を登録する"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: "ユーザーが正常に登録されました"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /users/{userID}:
    get:
      summary: "ユーザープロフィール取得"
      description: "ユーザーのプロフィールデータを取得します"
      tags:
        - user
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーID"
      responses:
        "200":
          description: "プロフィール取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "指定されたユーザーが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "UserNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    put:
      tags:
        - user
      summary: "ユーザープロフィール更新"
      description: "ユーザーの個人情報を更新する"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "200":
          description: "ユーザーが正常に更新されました"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "404":
          description: "指定されたユーザーが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "UserNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    delete:
      tags:
        - user
      summary: "ユーザー削除"
      description: "ユーザーを削除する"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーUID"
      responses:
        "204":
          description: "ユーザーが正常に削除されました"
        "404":
          description: "指定されたユーザーが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "UserNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /users/{userID}/notification:
    get:
      tags:
        - user
      summary: "通知設定取得"
      description: "ユーザーの通知設定を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーID"
      responses:
        "200":
          description: "通知設定取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotification"
        "404":
          description: "指定されたユーザーが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "UserNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - user
      summary: "通知設定更新"
      description: "ユーザーの通知設定を更新します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserNotification"
      responses:
        "200":
          description: "通知設定更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotification"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    put:
      tags:
        - user
      summary: "通知設定更新"
      description: "ユーザーの通知設定を更新します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserNotification"
      responses:
        "200":
          description: "通知設定更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotification"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /primary_doctors:
    get:
      tags:
        - primary_doctors
      summary: "主治医取得"
      description: "ユーザーの主治医情報を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "主治医情報取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Doctor"
        "404":
          description: "指定されたユーザーが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "UserNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - primary_doctors
      summary: "主治医登録"
      description: "ユーザーの主治医を登録します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrimaryDoctorsRequest"
      responses:
        "200":
          description: "主治医登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrimaryDoctorsResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /primary_doctors/{doctorID}:
    delete:
      tags:
        - primary_doctors
      summary: "主治医削除"
      description: "ユーザーの主治医を削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: doctorID
          required: true
          schema:
            type: string
            description: "医者ID"
      responses:
        "204":
          description: "主治医削除成功"
        "404":
          description: "指定された主治医が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "PrimaryDoctorNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /primary_doctors/{doctorID}/users:
    get:
      tags:
        - primary_doctors
      summary: "主治医患者取得"
      description: "主治医の患者情報を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: doctorID
          required: true
          schema:
            type: string
            description: "医師ID"
      responses:
        "200":
          description: "主治医患者取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /health_checkups:
    post:
      tags:
        - health_checkup
      summary: "検査結果登録"
      description: "ユーザーの健康診断結果を登録します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HealthCheckupRequest"
      responses:
        "200":
          description: "検査結果登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckupResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /users/{userID}/health_checkups:
    get:
      tags:
        - health_checkup
      summary: "検査結果一覧取得"
      description: "一週間分の検査結果を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーID"
      responses:
        "200":
          description: "検査結果一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/HealthCheckup"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /users/{userID}/health_checkups/{healthCheckupID}:
    get:
      tags:
        - health_checkup
      summary: "検査結果取得"
      description: "ユーザーの健康診断結果を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: healthCheckupID
          required: true
          schema:
            type: string
            description: "検査結果UUID"
        - in: path
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーID"
      responses:
        "200":
          description: "検査結果取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckup"
        "404":
          description: "指定された検査結果が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "HealthCheckupNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    put:
      tags:
        - health_checkup
      summary: "検査結果更新"
      description: "ユーザーの健康診断結果を更新します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: healthCheckupID
          required: true
          schema:
            type: string
            description: "検査結果UUID"
        - in: path
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HealthCheckupRequest"
      responses:
        "200":
          description: "検査結果更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckupResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "404":
          description: "指定された検査結果が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "HealthCheckupNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /health_checkups/{healthCheckupID}:
    delete:
      tags:
        - health_checkup
      summary: "検査結果削除"
      description: "ユーザーの健康診断結果を削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: healthCheckupID
          required: true
          schema:
            type: string
            description: "検査結果UUID"
      responses:
        "204":
          description: "検査結果削除成功"
        "404":
          description: "指定された検査結果が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "HealthCheckupNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
  /hospitals:
    get:
      tags:
        - hospital
      summary: "病院一覧取得"
      description: "病院一覧を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "病院一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Hospital"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /hospitals/{hospitalID}:
    get:
      tags:
        - hospital
      summary: "病院情報取得"
      description: "病院情報を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: hospitalID
          required: true
          schema:
            type: string
            description: "病院UUID"
      responses:
        "200":
          description: "病院情報取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hospital"
        "404":
          description: "指定された病院が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "HospitalNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /hospitals/news:
    get:
      tags:
        - hospital
      summary: "全病院ニュース一覧取得"
      description: "全病院のニュース一覧を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "全病院ニュース一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/HospitalNews"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /hospitals/{hospitalID}/news:
    get:
      tags:
        - hospital
      summary: "病院ニュース一覧取得"
      description: "病院のニュース一覧を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: hospitalID
          required: true
          schema:
            type: string
            description: "病院UUID"
      responses:
        "200":
          description: "病院ニュース一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/HospitalNews"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - hospital
      summary: "病院ニュース登録"
      description: "病院のニュースを登録します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: hospitalID
          required: true
          schema:
            type: string
            description: "病院UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HospitalNewsRequest"
      responses:
        "200":
          description: "病院ニュース登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HospitalNewsResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /hospitals/{hospitalID}/news/{hospitalNewsID}:
    delete:
      tags:
        - hospital
      summary: "病院ニュース削除"
      description: "病院のニュースを削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: hospitalID
          required: true
          schema:
            type: string
            description: "病院UUID"
        - in: path
          name: hospitalNewsID
          required: true
          schema:
            type: string
            description: "ニュースUUID"
      responses:
        "204":
          description: "病院ニュース削除成功"
        "404":
          description: "指定されたニュースが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "NewsNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /hospitals/{hospitalID}/doctors:
    get:
      tags:
        - doctor
      summary: "病院ごとの医師一覧取得"
      description: "病院の医師一覧を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: hospitalID
          required: true
          schema:
            type: string
            description: "病院UUID"
      responses:
        "200":
          description: "医師一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Doctor"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /doctors:
    get:
      tags:
        - doctor
      summary: "医師検索"
      description: "医者名、診療科、病院名で医師を検索します。全ての条件に一致する医師を返します（AND検索）。"
      parameters:
        - in: query
          name: doctorName
          schema:
            type: string
          required: false
          description: "医者名の部分一致検索"
        - in: query
          name: departmentID
          schema:
            type: string
          required: false
          description: "診療科IDで検索"
        - in: query
          name: hospitalName
          schema:
            type: string
          required: false
          description: "病院名の部分一致検索"
      responses:
        "200":
          description: "検索結果のリスト"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Doctor"
        "400":
          description: "不正なクエリパラメータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidQuery"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - doctor
      summary: "医師登録"
      description: "医師を登録します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DoctorRequest"
      responses:
        "200":
          description: "医師登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /doctors/{doctorID}:
    get:
      tags:
        - doctor
      summary: "医師情報取得"
      description: "医師情報を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: doctorID
          required: true
          schema:
            type: string
            description: "医師ID"
      responses:
        "200":
          description: "医師情報取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Doctor"
        "404":
          description: "指定された医師が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "DoctorNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    put:
      tags:
        - doctor
      summary: "医師情報更新"
      description: "医師情報を更新します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: doctorID
          required: true
          schema:
            type: string
            description: "医師ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DoctorRequest"
      responses:
        "200":
          description: "医師情報更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoctorResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "404":
          description: "指定された医師が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "DoctorNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

    delete:
      tags:
        - doctor
      summary: "医師削除"
      description: "医師を削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: doctorID
          required: true
          schema:
            type: string
            description: "医師ID"
      responses:
        "204":
          description: "医師削除成功"
        "404":
          description: "指定された医師が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "DoctorNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /departments:
    get:
      tags:
        - department
      summary: "診療科一覧取得"
      description: "診療科一覧を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "診療科一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Department"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /chats:
    get:
      tags:
        - chat
      summary: "チャット一覧取得"
      description: "チャット一覧を取得します(userプロパティは、医師の管理者画面で使用します)"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "チャット一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Chat"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - chat
      summary: "チャット作成"
      description: "新しいチャットを作成します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatRequest"
      responses:
        "200":
          description: "チャットが作成されました"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /chats/{chatID}/messages:
    get:
      tags:
        - chat
      summary: "メッセージ一覧表示"
      description: "メッセージを一覧表示します。"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: chatID
          required: true
          schema:
            type: string
            description: "チャットUUID"
      responses:
        "200":
          description: "メッセージ一覧表示成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Message"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - chat
      summary: "メッセージ送信"
      description: "メッセージを送信します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: chatID
          required: true
          schema:
            type: string
            description: "チャットUUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageRequest"
      responses:
        "200":
          description: "メッセージ送信成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /chats/{chatID}/messages/{messageID}:
    delete:
      tags:
        - chat
      summary: "メッセージ削除"
      description: "メッセージを削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: chatID
          required: true
          schema:
            type: string
            description: "チャットUUID"
        - in: path
          name: messageID
          required: true
          schema:
            type: string
            description: "メッセージUUID"
      responses:
        "204":
          description: "メッセージ削除成功"
        "404":
          description: "指定されたメッセージが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "MessageNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /family_emails:
    get:
      tags:
        - family_email
      summary: "家族メールアドレス一覧取得"
      description: "家族メールアドレス一覧を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "家族メールアドレス一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FamilyEmail"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - family_email
      summary: "家族メールアドレス登録"
      description: "家族メールアドレスを登録します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FamilyEmailsPostRequest"
      responses:
        "200":
          description: "家族メールアドレス登録成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FamilyEmailResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /family_emails/{familyEmailID}:
    put:
      tags:
        - family_email
      summary: "家族メールアドレス更新"
      description: "家族メールアドレスを更新します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: familyEmailID
          required: true
          schema:
            type: string
            description: "家族メールアドレスUUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FamilyEmailRequest"
      responses:
        "200":
          description: "家族メールアドレス更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FamilyEmailResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "404":
          description: "指定された家族メールアドレスが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "FamilyEmailNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    delete:
      tags:
        - family_email
      summary: "家族メールアドレス削除"
      description: "家族メールアドレスを削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: familyEmailID
          required: true
          schema:
            type: string
            description: "家族メールアドレスUUID"
      responses:
        "204":
          description: "家族メールアドレス削除成功"
        "404":
          description: "指定された家族メールアドレスが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "FamilyEmailNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /medicines:
    get:
      tags:
        - medicine
      summary: "おくすり一覧取得"
      description: "登録してある薬の名前と残量を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "おくすり取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Medicine"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - medicine
      summary: "おくすり追加"
      description: "新しい薬を追加します。reminderIDに用いられるUUIDv4はアプリ側で生成しておく必要があります"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicinePostRequest"
      responses:
        "200":
          description: "おくすり追加成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicineResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /medicines/reminders:
    get:
      tags:
        - medicine
      summary: "リマインダー一覧取得"
      parameters:
        - in: query
          name: reminderTime
          description: "リマインダーの時間"
          schema:
            type: string
            example: "08:00"
          required: true
        - in: query
          name: reminderDayOfWeek
          description: "リマインダーの曜日"
          schema:
            type: string
            example: "monday"
          required: true
      responses:
        "200":
          description: "リマインダー取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MedicineReminder"
        "400":
          description: "不正なクエリパラメータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "Bad Request"

        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /medicines/{medicineID}:
    put:
      tags:
        - medicine
      summary: "おくすり更新"
      description: "登録済みの薬の情報を更新します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: medicineID
          required: true
          schema:
            type: string
            description: "薬のID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicineRequest"
      responses:
        "200":
          description: "おくすり更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicineResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

    delete:
      tags:
        - medicine
      summary: "おくすり削除"
      description: "登録済みの薬を削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: medicineID
          required: true
          schema:
            type: string
            description: "削除する薬のID"
      responses:
        "204":
          description: "おくすり削除成功"
        "404":
          description: "指定された薬が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "MedicineNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /diseases:
    get:
      tags:
        - disease
      summary: "病気検索"
      description: "病気名で病気を検索します(部分一致検索&ひらがな漢字検索)。QueryParamsに何も指定しない場合は、空配列が返却される"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: query
          name: diseaseName
          schema:
            type: string
          required: false
          description: "病気名の部分一致検索"
      responses:
        "200":
          description: "検索結果のリスト"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Disease"
        "400":
          description: "不正なクエリパラメータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidQuery"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /diseases/famous:
    get:
      tags:
        - disease
      summary: "有名な病気一覧取得"
      description: "有名な病気一覧を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "有名な病気一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Disease"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /chronic_diseases:
    get:
      tags:
        - chronic_disease
      summary: "持病一覧取得"
      description: "登録してある持病名を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "持病一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ChronicDisease"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

    post:
      tags:
        - chronic_disease
      summary: "持病追加"
      description: "検索した持病を追加します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChronicDiseaseRequest"
      responses:
        "200":
          description: "持病追加成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChronicDiseaseResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /chronic_diseases/{chronicDiseaseID}:
    delete:
      tags:
        - chronic_disease
      summary: "持病削除"
      description: "持病を削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: chronicDiseaseID
          required: true
          schema:
            type: string
            description: "持病ID"
      responses:
        "204":
          description: "持病削除成功"
        "404":
          description: "指定された持病が存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "DiseaseNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /doctors/{doctorID}/calls:
    get:
      tags:
        - call
      summary: "医師の通話予約一覧取得"
      description: "医師の通話予約一覧を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: doctorID
          required: true
          schema:
            type: string
            description: "医師ID"
      responses:
        "200":
          description: "医師の通話予約一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CallReservation"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /calls:
    get:
      tags:
        - call
      summary: "通話予約取得"
      description: "医師とユーザーの通話予約情報を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: query
          name: doctorID
          required: true
          schema:
            type: string
            description: "医師ID"
        - in: query
          name: userID
          required: true
          schema:
            type: string
            description: "ユーザーID"
      responses:
        "200":
          description: "通話予約取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CallReservation"
        "404":
          description: "通話予約が見つかりません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "CallReservationNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

    post:
      tags:
        - call
      summary: "通話予約追加"
      description: "医師とユーザー間の通話予約を追加します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CallReservationRequest"
      responses:
        "200":
          description: "通話予約追加成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallReservationResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /calls/{callReservationID}:
    get:
      tags:
        - call
      summary: "通話予約取得"
      description: "通話予約情報を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: callReservationID
          required: true
          schema:
            type: string
            description: "通話予約ID"
      responses:
        "200":
          description: "通話予約取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallReservation"
        "404":
          description: "通話予約が見つかりません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "CallReservationNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    put:
      tags:
        - call
      summary: "通話予約更新"
      description: "通話予約の日時を更新します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: callReservationID
          required: true
          schema:
            type: string
            description: "通話予約ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CallReservationRequest"
      responses:
        "200":
          description: "通話予約更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CallReservationResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

    delete:
      tags:
        - call
      summary: "通話予約削除"
      description: "通話予約を削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: callReservationID
          required: true
          schema:
            type: string
            description: "通話予約ID"
      responses:
        "204":
          description: "通話予約削除成功"
        "404":
          description: "通話予約が見つかりません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "CallReservationNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /robots:
    get:
      tags:
        - robot
      summary: "ロボット一覧取得"
      description: "ロボット一覧を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      responses:
        "200":
          description: "ロボット一覧取得成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Robot"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    post:
      tags:
        - robot
      summary: "ロボット追加"
      description: "新しいロボットを追加します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RobotRequest"
      responses:
        "200":
          description: "ロボット追加成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RobotResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /robots/{robotID}:
    get:
      tags:
        - robot
      summary: "ロボット情報取得"
      description: "ロボットの情報を取得します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: robotID
          required: true
          schema:
            type: string
            description: "ロボットID"
      responses:
        "200":
          description: "ロボット情報取得成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Robot"
        "400":
          description: "指定されたロボットが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "RobotNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    put:
      tags:
        - robot
      summary: "ロボット情報更新"
      description: "ロボットの情報を更新します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: robotID
          required: true
          schema:
            type: string
            description: "ロボットID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RobotRequest"
      responses:
        "200":
          description: "ロボット情報更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RobotResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
    delete:
      tags:
        - robot
      summary: "ロボット削除"
      description: "ロボットを削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: robotID
          required: true
          schema:
            type: string
            description: "ロボットID"
      responses:
        "204":
          description: "ロボット削除成功"
        "400":
          description: "指定されたロボットが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "RobotNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /robots/{robotID}/power:
    put:
      tags:
        - robot
      summary: "ロボット電源操作"
      description: "ロボットの電源を操作します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: robotID
          required: true
          schema:
            type: string
            description: "ロボットID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RobotPowerRequest"
      responses:
        "200":
          description: "ロボット電源操作成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Robot"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /unicorn/emergency:
    post:
      tags:
        - unicorn
      summary: "緊急要請"
      description: "緊急要請を行います"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Emergency"
      responses:
        "200":
          description: "緊急通報成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Emergency"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /unicorn/{robotID}/moving:
    post:
      tags:
        - unicorn
      summary: "移動通知"
      description: "ロボットの移動通知を行います"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: robotID
          required: true
          schema:
            type: string
            description: "ロボットID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Moving"
      responses:
        "200":
          description: "移動通知成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Moving"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /unicorn/{robotID}/arrival:
    post:
      tags:
        - unicorn
      summary: "到着通知"
      description: "ロボットの到着通知を行います"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: robotID
          required: true
          schema:
            type: string
            description: "ロボットID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Arrival"
      responses:
        "200":
          description: "到着通知成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Arrival"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /unicorn/{robotID}/complete:
    post:
      tags:
        - unicorn
      summary: "完了通知"
      description: "ロボットの検査・治療・搬送の完了通知を行います"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: robotID
          required: true
          schema:
            type: string
            description: "ロボットID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Complete"
      responses:
        "200":
          description: "完了通知成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complete"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
  /firebase/accounts:
    post:
      tags:
        - firebase
      summary: "Firebaseアカウント作成"
      description: "Firebaseアカウントを作成します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FirebaseAccountRequest"
      responses:
        "200":
          description: "Firebaseアカウント作成成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FirebaseAccountResponse"
        "400":
          description: "不正なデータが送信されました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "InvalidData"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"

  /firebase/accounts/{robotID}:
    delete:
      tags:
        - firebase
      summary: "Firebaseアカウント削除"
      description: "Firebaseアカウントを削除します"
      parameters:
        - in: header
          name: X-UID
          required: true
          schema:
            type: string
            description: "UID"
        - in: path
          name: robotID
          required: true
          schema:
            type: string
            description: "FirebaseアカウントID"
      responses:
        "204":
          description: "Firebaseアカウント削除成功"
        "400":
          description: "指定されたFirebaseアカウントが存在しません"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "FirebaseAccountNotFound"
        "500":
          description: "サーバーエラーが発生しました"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    description: "エラータイプ"
                    example: "ServerError"
