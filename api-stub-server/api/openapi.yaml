openapi: 3.0.0
info:
  title: Unicorn API
  description: API for managing unicorn.
  version: 1.1.1
servers:
- url: https://api-stub-server-384446500375.asia-east1.run.app/
  description: Backend server
tags:
- name: app_config
  description: ネイティブアプリ設定
- name: account
  description: アカウント情報
- name: user
  description: ユーザー情報
- name: primary_doctors
  description: 主治医情報
- name: health_checkup
  description: 検査情報
- name: hospital
  description: 病院情報
- name: doctor
  description: 医師情報
- name: department
  description: 診療科情報
- name: chat
  description: チャット情報
- name: family_email
  description: 家族メール情報
- name: medicine
  description: 薬情報
- name: chromic_disease
  description: 持病情報
- name: call
  description: 通話情報
paths:
  /app_config:
    get:
      tags:
      - app_config
      summary: アプリ設定取得
      description: アプリの設定情報を取得します
      operationId: app_configGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: アプリ設定取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: AppConfig
  /accounts:
    get:
      tags:
      - account
      summary: アカウント情報取得
      description: アカウント情報を取得します
      operationId: accountsGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: アカウント情報取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "404":
          description: 指定されたアカウントが存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Account
    post:
      tags:
      - account
      summary: アカウント登録
      description: アカウントを登録します
      operationId: accountsPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
        required: true
      responses:
        "200":
          description: アカウント登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Account
    delete:
      tags:
      - account
      summary: アカウント削除
      description: アカウントを削除します
      operationId: accountsDELETE
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "204":
          description: アカウント削除成功
        "404":
          description: 指定されたアカウントが存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Account
  /users:
    post:
      tags:
      - user
      summary: ユーザープロフィール登録
      description: ユーザーの個人情報を登録する
      operationId: usersPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        "200":
          description: ユーザーが正常に登録されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: User
  /users/{userID}:
    get:
      tags:
      - user
      summary: ユーザープロフィール取得
      description: ユーザーのプロフィールデータを取得します
      operationId: usersUserIDGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: ユーザーID
      responses:
        "200":
          description: プロフィール取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: 指定されたユーザーが存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: ユーザープロフィール更新
      description: ユーザーの個人情報を更新する
      operationId: usersUserIDPUT
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: ユーザーID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        "200":
          description: ユーザーが正常に更新されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: 指定されたユーザーが存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: ユーザー削除
      description: ユーザーを削除する
      operationId: usersUserIDDELETE
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: userID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: ユーザーUID
      responses:
        "204":
          description: ユーザーが正常に削除されました
        "404":
          description: 指定されたユーザーが存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: User
  /primary_doctors:
    get:
      tags:
      - primary_doctors
      summary: 主治医取得
      description: ユーザーの主治医情報を取得します
      operationId: primary_doctorsGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: 主治医情報取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "404":
          description: 指定されたユーザーが存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: PrimaryDoctors
    put:
      tags:
      - primary_doctors
      summary: 主治医更新
      description: ユーザーの主治医を更新します
      operationId: primary_doctorsPUT
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrimaryDoctorsRequest'
        required: true
      responses:
        "200":
          description: 主治医更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrimaryDoctorsResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: PrimaryDoctors
    post:
      tags:
      - primary_doctors
      summary: 主治医登録
      description: ユーザーの主治医を登録します
      operationId: primary_doctorsPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrimaryDoctorsRequest'
        required: true
      responses:
        "200":
          description: 主治医登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrimaryDoctorsResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: PrimaryDoctors
  /health_checkups:
    get:
      tags:
      - health_checkup
      summary: 検査結果一覧取得
      description: 一週間分の検査結果を取得します
      operationId: health_checkupsGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: 検査結果一覧取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: HealthCheckup
    post:
      tags:
      - health_checkup
      summary: 検査結果登録
      description: ユーザーの健康診断結果を登録します
      operationId: health_checkupsPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthCheckupRequest'
        required: true
      responses:
        "200":
          description: 検査結果登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckupResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: HealthCheckup
  /health_checkups/{healthCheckupID}:
    get:
      tags:
      - health_checkup
      summary: 検査結果取得
      description: ユーザーの健康診断結果を取得します
      operationId: health_checkupsHealthCheckupIDGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: healthCheckupID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 検査結果UUID
      responses:
        "200":
          description: 検査結果取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckup'
        "404":
          description: 指定された検査結果が存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: HealthCheckup
    put:
      tags:
      - health_checkup
      summary: 検査結果更新
      description: ユーザーの健康診断結果を更新します
      operationId: health_checkupsHealthCheckupIDPUT
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: healthCheckupID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 検査結果UUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthCheckupRequest'
        required: true
      responses:
        "200":
          description: 検査結果更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckupResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: 指定された検査結果が存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: HealthCheckup
    delete:
      tags:
      - health_checkup
      summary: 検査結果削除
      description: ユーザーの健康診断結果を削除します
      operationId: health_checkupsHealthCheckupIDDELETE
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: healthCheckupID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 検査結果UUID
      responses:
        "204":
          description: 検査結果削除成功
        "404":
          description: 指定された検査結果が存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500_1'
      x-swagger-router-controller: HealthCheckup
  /hospitals:
    get:
      tags:
      - hospital
      summary: 病院一覧取得
      description: 病院一覧を取得します
      operationId: hospitalsGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: 病院一覧取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Hospital
  /hospitals/{hospitalID}:
    get:
      tags:
      - hospital
      summary: 病院情報取得
      description: 病院情報を取得します
      operationId: hospitalsHospitalIDGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: hospitalID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 病院UUID
      responses:
        "200":
          description: 病院情報取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hospital'
        "404":
          description: 指定された病院が存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_2'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Hospital
  /hospitals/{hospitalID}/doctors:
    get:
      tags:
      - doctor
      summary: 病院ごとの医師一覧取得
      description: 病院の医師一覧を取得します
      operationId: hospitalsHospitalIDDoctorsGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: hospitalID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 病院UUID
      responses:
        "200":
          description: 医師一覧取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Doctor
  /doctors:
    get:
      tags:
      - doctor
      summary: 医師検索
      description: 医者名、診療科、病院名で医師を検索します。全ての条件に一致する医師を返します（AND検索）。
      operationId: doctorsGET
      parameters:
      - name: doctorName
        in: query
        description: 医者名の部分一致検索
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: departmentID
        in: query
        description: 診療科IDで検索
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: hospitalName
        in: query
        description: 病院名の部分一致検索
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: 検索結果のリスト
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: 不正なクエリパラメータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400_1'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Doctor
    post:
      tags:
      - doctor
      summary: 医師登録
      description: 医師を登録します
      operationId: doctorsPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoctorRequest'
        required: true
      responses:
        "200":
          description: 医師登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoctorResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Doctor
  /doctors/{doctorID}:
    get:
      tags:
      - doctor
      summary: 医師情報取得
      description: 医師情報を取得します
      operationId: doctorsDoctorIDGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: doctorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 医師ID
      responses:
        "200":
          description: 医師情報取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        "404":
          description: 指定された医師が存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_3'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Doctor
    put:
      tags:
      - doctor
      summary: 医師情報更新
      description: 医師情報を更新します
      operationId: doctorsDoctorIDPUT
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: doctorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 医師ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoctorRequest'
        required: true
      responses:
        "200":
          description: 医師情報更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoctorResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: 指定された医師が存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_3'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Doctor
    delete:
      tags:
      - doctor
      summary: 医師削除
      description: 医師を削除します
      operationId: doctorsDoctorIDDELETE
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: doctorID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 医師ID
      responses:
        "204":
          description: 医師削除成功
        "404":
          description: 指定された医師が存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_3'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Doctor
  /departments:
    get:
      tags:
      - department
      summary: 診療科一覧取得
      description: 診療科一覧を取得します
      operationId: departmentsGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: 診療科一覧取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Department
  /chats:
    get:
      tags:
      - chat
      summary: チャット一覧取得
      description: チャット一覧を取得します(userプロパティは、医師の管理者画面で使用します)
      operationId: chatsGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: チャット一覧取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Chat
    post:
      tags:
      - chat
      summary: チャット作成
      description: 新しいチャットを作成します
      operationId: chatsPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
        required: true
      responses:
        "200":
          description: チャットが作成されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Chat
  /chats/{chatID}/messages:
    get:
      tags:
      - chat
      summary: メッセージ一覧表示
      description: メッセージを一覧表示します。
      operationId: chatsChatIDMessagesGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: chatID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: チャットUUID
      responses:
        "200":
          description: メッセージ一覧表示成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Chat
    post:
      tags:
      - chat
      summary: メッセージ送信
      description: メッセージを送信します
      operationId: chatsChatIDMessagesPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: chatID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: チャットUUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        required: true
      responses:
        "200":
          description: メッセージ送信成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Chat
  /chats/{chatID}/messages/{messageID}:
    delete:
      tags:
      - chat
      summary: メッセージ削除
      description: メッセージを削除します
      operationId: chatsChatIDMessagesMessageIDDELETE
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: chatID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: チャットUUID
      - name: messageID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: メッセージUUID
      responses:
        "204":
          description: メッセージ削除成功
        "404":
          description: 指定されたメッセージが存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_4'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Chat
  /family_emails:
    get:
      tags:
      - family_email
      summary: 家族メールアドレス一覧取得
      description: 家族メールアドレス一覧を取得します
      operationId: family_emailsGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: 家族メールアドレス一覧取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: FamilyEmail
    post:
      tags:
      - family_email
      summary: 家族メールアドレス登録
      description: 家族メールアドレスを登録します
      operationId: family_emailsPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FamilyEmailRequest'
        required: true
      responses:
        "200":
          description: 家族メールアドレス登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyEmailResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: FamilyEmail
  /family_emails/{familyEmailID}:
    put:
      tags:
      - family_email
      summary: 家族メールアドレス更新
      description: 家族メールアドレスを更新します
      operationId: family_emailsFamilyEmailIDPUT
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: familyEmailID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 家族メールアドレスUUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FamilyEmailRequest'
        required: true
      responses:
        "200":
          description: 家族メールアドレス更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyEmailResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "404":
          description: 指定された家族メールアドレスが存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_5'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: FamilyEmail
    delete:
      tags:
      - family_email
      summary: 家族メールアドレス削除
      description: 家族メールアドレスを削除します
      operationId: family_emailsFamilyEmailIDDELETE
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: familyEmailID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 家族メールアドレスUUID
      responses:
        "204":
          description: 家族メールアドレス削除成功
        "404":
          description: 指定された家族メールアドレスが存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_5'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: FamilyEmail
  /medicines:
    get:
      tags:
      - medicine
      summary: おくすり一覧取得
      description: 登録してある薬の名前と残量を取得します
      operationId: medicinesGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: おくすり取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Medicine
    post:
      tags:
      - medicine
      summary: おくすり追加
      description: 新しい薬を追加します
      operationId: medicinesPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicinePostRequest'
        required: true
      responses:
        "200":
          description: おくすり追加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Medicine
  /medicines/{medicineID}:
    put:
      tags:
      - medicine
      summary: おくすり更新
      description: 登録済みの薬の情報を更新します
      operationId: medicinesMedicineIDPUT
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: medicineID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 薬のID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicineRequest'
        required: true
      responses:
        "200":
          description: おくすり更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicineResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Medicine
    delete:
      tags:
      - medicine
      summary: おくすり削除
      description: 登録済みの薬を削除します
      operationId: medicinesMedicineIDDELETE
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: medicineID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 削除する薬のID
      responses:
        "204":
          description: おくすり削除成功
        "404":
          description: 指定された薬が存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_6'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Medicine
  /chronic_diseases:
    get:
      tags:
      - chromic_disease
      summary: 持病一覧取得
      description: 登録してある持病名を取得します
      operationId: chronic_diseasesGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      responses:
        "200":
          description: 持病一覧取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_9'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: ChromicDisease
    post:
      tags:
      - chromic_disease
      summary: 持病追加
      description: 検索した持病を追加します
      operationId: chronic_diseasesPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChronicDiseaseRequest'
        required: true
      responses:
        "200":
          description: 持病追加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChronicDiseaseResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: ChromicDisease
    delete:
      tags:
      - chromic_disease
      summary: 持病削除
      description: 持病を削除します
      operationId: chronic_diseasesDELETE
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: diseaseName
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          description: 削除する持病名
      responses:
        "204":
          description: 持病削除成功
        "404":
          description: 指定された持病が存在しません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_7'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: ChromicDisease
  /calls:
    get:
      tags:
      - call
      summary: 通話予約取得
      description: 医師とユーザーの通話予約情報を取得します
      operationId: callsGET
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: doctorID
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          description: 医師ID
      - name: userID
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          description: ユーザーID
      responses:
        "200":
          description: 通話予約取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallReservation'
        "404":
          description: 通話予約が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_8'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Call
    post:
      tags:
      - call
      summary: 通話予約追加
      description: 医師とユーザー間の通話予約を追加します
      operationId: callsPOST
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallReservationRequest'
        required: true
      responses:
        "200":
          description: 通話予約追加成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallReservationResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Call
  /calls/{callReservationID}:
    put:
      tags:
      - call
      summary: 通話予約更新
      description: 通話予約の日時を更新します
      operationId: callsCallReservationIDPUT
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: callReservationID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 通話予約ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallReservationRequest'
        required: true
      responses:
        "200":
          description: 通話予約更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallReservationResponse'
        "400":
          description: 不正なデータが送信されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Call
    delete:
      tags:
      - call
      summary: 通話予約削除
      description: 通話予約を削除します
      operationId: callsCallReservationIDDELETE
      parameters:
      - name: X-UID
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: UID
      - name: callReservationID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          description: 通話予約ID
      responses:
        "204":
          description: 通話予約削除成功
        "404":
          description: 通話予約が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404_8'
        "500":
          description: サーバーエラーが発生しました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      x-swagger-router-controller: Call
components:
  schemas:
    Account:
      type: object
      properties:
        uid:
          type: string
          description: User ID
          example: "1234567890"
        role:
          type: string
          description: User Role
          example: user
          enum:
          - user
          - doctor
        fcmTokenId:
          type: string
          description: FCMトークンID
          example: fcm_token_id
      example:
        uid: "1234567890"
        role: user
        fcmTokenId: fcm_token_id
    AccountRequest:
      type: object
      properties:
        uid:
          type: string
          description: User ID
          example: "1234567890"
        role:
          type: string
          description: User Role
          example: user
          enum:
          - user
          - doctor
        fcmTokenId:
          type: string
          description: FCMトークンID
          example: fcm_token_id
    AccountResponse:
      type: object
      properties:
        uid:
          type: string
          description: User ID
          example: "1234567890"
        role:
          type: string
          description: User Role
          example: user
          enum:
          - user
          - doctor
        fcmTokenId:
          type: string
          description: FCMトークンID
          example: fcm_token_id
      example:
        uid: "1234567890"
        role: user
        fcmTokenId: fcm_token_id
    UserRequest:
      type: object
      properties:
        firstName:
          type: string
          description: ユーザーの名
          example: 太郎
        lastName:
          type: string
          description: ユーザーの姓
          example: 山田
        email:
          type: string
          description: ユーザーのメールアドレス
          example: test@test.com
        gender:
          type: string
          description: ユーザーの性別
          example: male
          enum:
          - male
          - female
          - other
        birthDate:
          type: string
          description: ユーザーの生年月日
          format: date
          example: 1990-01-01
        address:
          type: string
          description: ユーザーの住所
          example: 東京都新宿区1-1-1
        postalCode:
          type: string
          description: ユーザーの郵便番号
          example: 123-4567
        phoneNumber:
          type: string
          description: ユーザーの電話番号
          example: 090-1234-5678
        iconImage:
          type: string
          description: Base64エンコードされた画像データ
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        bodyHeight:
          type: number
          description: ユーザーの身長（cm単位）
          example: 180.5
        bodyWeight:
          type: number
          description: ユーザーの体重（kg単位）
          example: 75.5
        occupation:
          type: string
          description: ユーザーの職業
          example: エンジニア
    User:
      type: object
      properties:
        userID:
          type: string
          description: User ID
          example: "1234567890"
        firstName:
          type: string
          description: ユーザーの名
          example: 太郎
        lastName:
          type: string
          description: ユーザーの姓
          example: 山田
        email:
          type: string
          description: ユーザーのメールアドレス
          example: test@test.com
        gender:
          type: string
          description: ユーザーの性別
          example: male
          enum:
          - male
          - female
          - other
        birthDate:
          type: string
          description: ユーザーの生年月日
          format: date
          example: 1990-01-01
        address:
          type: string
          description: ユーザーの住所
          example: 東京都新宿区1-1-1
        postalCode:
          type: string
          description: ユーザーの郵便番号
          example: 123-4567
        phoneNumber:
          type: string
          description: ユーザーの電話番号
          example: 090-1234-5678
        iconImage:
          type: string
          description: Base64エンコードされた画像データ
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        bodyHeight:
          type: number
          description: ユーザーの身長（cm単位）
          example: 180.5
        bodyWeight:
          type: number
          description: ユーザーの体重（kg単位）
          example: 75.5
        occupation:
          type: string
          description: ユーザーの職業
          example: エンジニア
      example:
        lastName: 山田
        address: 東京都新宿区1-1-1
        occupation: エンジニア
        gender: male
        iconImage: !!binary |-
          VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
          MlZ2VW9EUVJTR3Y3VlE=
        postalCode: 123-4567
        bodyHeight: 180.5
        userID: "1234567890"
        birthDate: 1990-01-01T00:00:00.000+00:00
        firstName: 太郎
        phoneNumber: 090-1234-5678
        bodyWeight: 75.5
        email: test@test.com
    UserResponse:
      type: object
      properties:
        userID:
          type: string
          description: User ID
          example: "1234567890"
        firstName:
          type: string
          description: ユーザーの名
          example: 太郎
        lastName:
          type: string
          description: ユーザーの姓
          example: 山田
        email:
          type: string
          description: ユーザーのメールアドレス
          example: test@test.com
        phoneNumber:
          type: string
          description: ユーザーの電話番号
          example: 090-1234-5678
        iconImage:
          type: string
          description: Base64エンコードされた画像データ
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        bodyHeight:
          type: number
          description: ユーザーの身長（cm単位）
          example: 180.5
        bodyWeight:
          type: number
          description: ユーザーの体重（kg単位）
          example: 75.5
        occupation:
          type: string
          description: ユーザーの職業
          example: エンジニア
      example:
        firstName: 太郎
        lastName: 山田
        phoneNumber: 090-1234-5678
        occupation: エンジニア
        iconImage: !!binary |-
          VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
          MlZ2VW9EUVJTR3Y3VlE=
        bodyHeight: 1805
        userID: "1234567890"
        bodyWeight: 75
        email: test@test.com
    HealthCheckup:
      type: object
      properties:
        healthCheckupID:
          type: string
          description: 検査結果UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        date:
          type: string
          description: 健康診断日
          format: date
          example: 2020-01-01
        bodyTemperature:
          type: number
          description: 体温
          example: 36.5
        bloodPressure:
          type: string
          description: 血圧
          example: 120/80
        medicalRecord:
          type: string
          description: マークダウンで表記されるカルテ情報
          example: |-
            ## 2020年1月1日
            - 体温: 36.5
            - 血圧: 120/80
            - 診断: 軽度の風邪
      example:
        date: 2020-01-01T00:00:00.000+00:00
        bloodPressure: 120/80
        healthCheckupID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        bodyTemperature: 36.5
        medicalRecord: |-
          ## 2020年1月1日
          - 体温: 36.5
          - 血圧: 120/80
          - 診断: 軽度の風邪
    HealthCheckupRequest:
      type: object
      properties:
        date:
          type: string
          description: 検査日
          format: date
          example: 2020-01-01
        bodyTemperature:
          type: number
          description: 体温
          example: 36.5
        bloodPressure:
          type: string
          description: 血圧
          example: 120/80
        medicalRecord:
          type: string
          description: マークダウンで表記されるカルテ情報
          example: |-
            ## 2020年1月1日
            - 体温: 36.5
            - 血圧: 120/80
            - 診断: 軽度の風邪
    HealthCheckupResponse:
      type: object
      properties:
        healthCheckupID:
          type: string
          description: 検査結果UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        date:
          type: string
          description: 健康診断日
          format: date
          example: 2020-01-01
        bodyTemperature:
          type: number
          description: 体温
          example: 36.5
        bloodPressure:
          type: string
          description: 血圧
          example: 120/80
        medicalRecord:
          type: string
          description: マークダウンで表記されるカルテ情報
          example: |-
            ## 2020年1月1日
            - 体温: 36.5
            - 血圧: 120/80
            - 診断: 軽度の風邪
      example:
        date: 2020-01-01T00:00:00.000+00:00
        bloodPressure: 120/80
        healthCheckupID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        bodyTemperature: 36.5
        medicalRecord: |-
          ## 2020年1月1日
          - 体温: 36.5
          - 血圧: 120/80
          - 診断: 軽度の風邪
    Hospital:
      type: object
      properties:
        hospitalID:
          type: string
          description: 病院UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        hospitalName:
          type: string
          description: 病院名
          example: 東京都立大学病院
        address:
          type: string
          description: 病院住所
          example: 東京都新宿区1-1-1
        postalCode:
          type: string
          description: 病院郵便番号
          example: 123-4567
        phoneNumber:
          type: string
          description: 病院電話番号
          example: 090-1234-5678
      example:
        address: 東京都新宿区1-1-1
        phoneNumber: 090-1234-5678
        hospitalID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        postalCode: 123-4567
        hospitalName: 東京都立大学病院
    Doctor:
      type: object
      properties:
        doctorID:
          type: string
          description: 医師ID
          example: "1234567890"
        hospital:
          $ref: '#/components/schemas/Doctor_hospital'
        firstName:
          type: string
          description: 医師の名
          example: 太郎
        lastName:
          type: string
          description: 医師の姓
          example: 山田
        doctorIcon:
          type: string
          description: 医師アイコン画像
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        departments:
          type: array
          items:
            $ref: '#/components/schemas/Doctor_departments'
        email:
          type: string
          description: 医師メールアドレス
          example: sample@mail.com
        phoneNumber:
          type: string
          description: 医師電話番号
          example: 090-1234-5678
        chatSupportHours:
          type: string
          description: チャットサポート時間
          example: 9:00-17:00
        callSupportHours:
          type: string
          description: 通話サポート時間
          example: 9:00-17:00
      example:
        firstName: 太郎
        lastName: 山田
        chatSupportHours: 9:00-17:00
        phoneNumber: 090-1234-5678
        callSupportHours: 9:00-17:00
        doctorID: "1234567890"
        departments:
        - departmentName: 内科
          departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        - departmentName: 内科
          departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        hospital:
          hospitalID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          hospitalName: 東京都立大学病院
        doctorIcon: !!binary |-
          VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
          MlZ2VW9EUVJTR3Y3VlE=
        email: sample@mail.com
    DoctorRequest:
      type: object
      properties:
        hospitalID:
          type: string
          description: 病院UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        firstName:
          type: string
          description: 医師の名
          example: 太郎
        lastName:
          type: string
          description: 医師の姓
          example: 山田
        doctorIcon:
          type: string
          description: 医師アイコン画像
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        departments:
          type: array
          items:
            type: string
            description: 診療科UUID
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        email:
          type: string
          description: 医師メールアドレス
          example: sample@mail.com
        phoneNumber:
          type: string
          description: 医師電話番号
          example: 090-1234-5678
        chatSupportStartHour:
          type: string
          description: チャットサポート開始時間
          example: 9:00
        chatSupportEndHour:
          type: string
          description: チャットサポート終了時間
          example: 17:00
        callSupportStartHour:
          type: string
          description: 通話サポート開始時間
          example: 9:00
        callSupportEndHour:
          type: string
          description: 通話サポート終了時間
          example: 17:00
    DoctorResponse:
      type: object
      properties:
        hospitalID:
          type: string
          description: 病院UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        doctorName:
          type: string
          description: 医師名
          example: 山田 太郎
        doctorIcon:
          type: string
          description: 医師アイコン画像
          format: byte
        departments:
          type: array
          items:
            type: string
            description: 診療科UUID
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        email:
          type: string
          description: 医師メールアドレス
          example: sample@mail.com
        phoneNumber:
          type: string
          description: 医師電話番号
          example: 090-1234-5678
        chatSupportStartHour:
          type: string
          description: チャットサポート開始時間
          example: 9:00
        chatSupportEndHour:
          type: string
          description: チャットサポート終了時間
          example: 17:00
        callSupportStartHour:
          type: string
          description: 通話サポート開始時間
          example: 9:00
        callSupportEndHour:
          type: string
          description: 通話サポート終了時間
          example: 17:00
      example:
        doctorName: 山田 太郎
        phoneNumber: 090-1234-5678
        hospitalID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        chatSupportEndHour: 17:00
        callSupportStartHour: 9:00
        departments:
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        - f47ac10b-58cc-4372-a567-0e02b2c3d479
        chatSupportStartHour: 9:00
        callSupportEndHour: 17:00
        doctorIcon: ""
        email: sample@mail.com
    Department:
      type: object
      properties:
        departmentID:
          type: string
          description: 診療科UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        departmentName:
          type: string
          description: 診療科名
          example: 内科
      example:
        departmentName: 内科
        departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
    Chat:
      type: object
      properties:
        chatID:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        doctor:
          $ref: '#/components/schemas/Chat_doctor'
        user:
          $ref: '#/components/schemas/Chat_user'
        latestMessageText:
          type: string
          description: 最新メッセージ内容
          nullable: true
          example: "Hello, World!"
        latestMessageSentAt:
          type: string
          description: 最新メッセージ送信日時
          format: date-time
          nullable: true
          example: 2020-01-01T00:00:00Z
      example:
        doctor:
          firstName: 太郎
          lastName: 山田
          doctorID: "1234567890"
          doctorIcon: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        latestMessageSentAt: 2020-01-01T00:00:00Z
        chatID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        latestMessageText: "Hello, World!"
        user:
          firstName: 太郎
          lastName: 山田
          userIcon: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
          userID: "1234567890"
    ChatRequest:
      type: object
      properties:
        doctorID:
          type: string
          description: 医師ID
          example: "1234567890"
        userID:
          type: string
          description: ユーザーID
          example: "1234567890"
    ChatResponse:
      type: object
      properties:
        chatID:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        doctorID:
          type: string
          description: 医師ID
          example: "1234567890"
        userID:
          type: string
          description: ユーザーID
          example: "1234567890"
      example:
        chatID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        doctorID: "1234567890"
        userID: "1234567890"
    Message:
      type: object
      properties:
        messageID:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        chatID:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        senderID:
          type: string
          description: 送信者ID
          example: "1234567890"
        firstName:
          type: string
          description: 送信者の名
          example: 太郎
        lastName:
          type: string
          description: 送信者の姓
          example: 山田
        iconImage:
          type: string
          description: Base64エンコードされた画像データ
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        content:
          type: string
          description: メッセージ内容
          example: "Hello, World!"
        sentAt:
          type: string
          description: メッセージ送信日時
          format: date-time
          example: 2020-01-01T00:00:00Z
      example:
        firstName: 太郎
        lastName: 山田
        senderID: "1234567890"
        chatID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        iconImage: !!binary |-
          VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
          MlZ2VW9EUVJTR3Y3VlE=
        messageID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        sentAt: 2020-01-01T00:00:00Z
        content: "Hello, World!"
    MessageRequest:
      type: object
      properties:
        senderID:
          type: string
          description: 送信者ID
          example: "1234567890"
        content:
          type: string
          description: メッセージ内容
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    MessageResponse:
      type: object
      properties:
        messageID:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        senderID:
          type: string
          description: 送信者ID
          example: "1234567890"
        content:
          type: string
          description: メッセージ内容
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      example:
        senderID: "1234567890"
        messageID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        content: f47ac10b-58cc-4372-a567-0e02b2c3d479
    FamilyEmail:
      type: object
      properties:
        familyEmailID:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        email:
          type: string
          description: 家族メールアドレス
          example: sample@sample.com
        firstName:
          type: string
          description: 家族の名
          example: 太郎
        lastName:
          type: string
          description: 家族の姓
          example: 山田
        iconImage:
          type: string
          description: Base64エンコードされた画像データ
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        phoneNumber:
          type: string
          description: 家族の電話番号
          example: 090-1234-5678
      example:
        firstName: 太郎
        lastName: 山田
        phoneNumber: 090-1234-5678
        familyEmailID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        iconImage: !!binary |-
          VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
          MlZ2VW9EUVJTR3Y3VlE=
        email: sample@sample.com
    FamilyEmailRequest:
      type: object
      properties:
        email:
          type: string
          description: 家族メールアドレス
          example: sample@sample.com
        firstName:
          type: string
          description: 家族の名
          example: 太郎
        lastName:
          type: string
          description: 家族の姓
          example: 山田
        iconImage:
          type: string
          description: Base64エンコードされた画像データ
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        phoneNumber:
          type: string
          description: 家族の電話番号
          example: 090-1234-5678
    FamilyEmailResponse:
      type: object
      properties:
        familyEmailID:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        email:
          type: string
          description: 家族メールアドレス
          example: sample@sample.com
        firstName:
          type: string
          description: 家族の名
          example: 太郎
        lastName:
          type: string
          description: 家族の姓
          example: 山田
        iconImage:
          type: string
          description: Base64エンコードされた画像データ
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        phoneNumber:
          type: string
          description: 家族の電話番号
          example: 090-1234-5678
      example:
        firstName: 太郎
        lastName: 山田
        phoneNumber: 090-1234-5678
        familyEmailID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        iconImage: !!binary |-
          VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
          MlZ2VW9EUVJTR3Y3VlE=
        email: sample@sample.com
    Medicine:
      type: object
      properties:
        medicineID:
          type: string
          description: 薬のUUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        medicineName:
          type: string
          description: 薬の名前
          example: パラセタモール
        count:
          type: integer
          description: 薬の初期残量
          example: 30
        quantity:
          type: integer
          description: 薬の残量
          example: 20
      example:
        quantity: 20
        medicineID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        count: 30
        medicineName: パラセタモール
    MedicinePostRequest:
      type: object
      properties:
        medicineName:
          type: string
          description: 薬の名前
          example: パラセタモール
        count:
          type: integer
          description: 薬の初期残量
          example: 30
    MedicineRequest:
      type: object
      properties:
        medicineName:
          type: string
          description: 薬の名前
          example: パラセタモール
        quantity:
          type: integer
          description: 薬の残量
          example: 20
    MedicineResponse:
      type: object
      properties:
        medicineID:
          type: string
          description: 薬のUUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        medicineName:
          type: string
          description: 薬の名前
          example: パラセタモール
        count:
          type: integer
          description: 薬の初期残量
          example: 30
        quantity:
          type: integer
          description: 薬の残量
          example: 20
      example:
        quantity: 20
        medicineID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        count: 30
        medicineName: パラセタモール
    ChronicDisease:
      type: object
      properties:
        diseaseID:
          type: string
          description: 持病のUUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        diseaseName:
          type: string
          description: 持病名
          example: 高血圧
      example:
        diseaseName: 高血圧
        diseaseID: f47ac10b-58cc-4372-a567-0e02b2c3d479
    ChronicDiseaseRequest:
      type: object
      properties:
        diseaseName:
          type: string
          description: 持病名
          example: 糖尿病
    ChronicDiseaseResponse:
      type: object
      properties:
        diseaseID:
          type: string
          description: 持病のUUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        diseaseName:
          type: string
          description: 持病名
          example: 高血圧
      example:
        diseaseName: 高血圧
        diseaseID: f47ac10b-58cc-4372-a567-0e02b2c3d479
    CallReservation:
      type: object
      properties:
        callReservationID:
          type: string
          description: 通話予約UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        doctorID:
          type: string
          description: 医師ID
          example: "1234567890"
        userID:
          type: string
          description: ユーザーID
          example: "1234567890"
        callStartTime:
          type: string
          description: 通話開始時間
          format: date-time
          example: 2024-10-12T15:00:00Z
        callEndTime:
          type: string
          description: 通話終了時間
          format: date-time
          example: 2024-10-12T15:30:00Z
      example:
        callReservationID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        callEndTime: 2024-10-12T15:30:00Z
        doctorID: "1234567890"
        callStartTime: 2024-10-12T15:00:00Z
        userID: "1234567890"
    CallReservationRequest:
      type: object
      properties:
        doctorID:
          type: string
          description: 医師ID
          example: "1234567890"
        userID:
          type: string
          description: ユーザーID
          example: "1234567890"
        callStartTime:
          type: string
          description: 通話開始時間
          format: date-time
          example: 2024-10-12T15:00:00Z
        callEndTime:
          type: string
          description: 通話終了時間
          format: date-time
          example: 2024-10-12T15:30:00Z
    CallReservationResponse:
      type: object
      properties:
        callReservationID:
          type: string
          description: 通話予約UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        doctorID:
          type: string
          description: 医師ID
          example: "1234567890"
        userID:
          type: string
          description: ユーザーID
          example: "1234567890"
        callStartTime:
          type: string
          description: 通話開始時間
          format: date-time
          example: 2024-10-12T15:00:00Z
        callEndTime:
          type: string
          description: 通話終了時間
          format: date-time
          example: 2024-10-12T15:30:00Z
      example:
        callReservationID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        callEndTime: 2024-10-12T15:30:00Z
        doctorID: "1234567890"
        callStartTime: 2024-10-12T15:00:00Z
        userID: "1234567890"
    PrimaryDoctorsRequest:
      type: object
      properties:
        doctorIDs:
          type: array
          items:
            type: string
            description: 医師ID
            example: "1234567890"
    PrimaryDoctorsResponse:
      type: object
      properties:
        userID:
          type: string
          description: ユーザーID
          example: "1234567890"
        doctorIDs:
          type: array
          items:
            type: string
            description: 医師ID
            example: "1234567890"
      example:
        doctorIDs:
        - "1234567890"
        - "1234567890"
        userID: "1234567890"
    inline_response_200:
      type: object
      properties:
        available:
          type: boolean
          example: true
      example:
        available: true
    inline_response_500:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: ServerError
    inline_response_404:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: UserNotFound
    inline_response_400:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: InvalidData
    inline_response_200_1:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Doctor'
      example:
        data:
        - firstName: 太郎
          lastName: 山田
          chatSupportHours: 9:00-17:00
          phoneNumber: 090-1234-5678
          callSupportHours: 9:00-17:00
          doctorID: "1234567890"
          departments:
          - departmentName: 内科
            departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          - departmentName: 内科
            departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          hospital:
            hospitalID: f47ac10b-58cc-4372-a567-0e02b2c3d479
            hospitalName: 東京都立大学病院
          doctorIcon: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
          email: sample@mail.com
        - firstName: 太郎
          lastName: 山田
          chatSupportHours: 9:00-17:00
          phoneNumber: 090-1234-5678
          callSupportHours: 9:00-17:00
          doctorID: "1234567890"
          departments:
          - departmentName: 内科
            departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          - departmentName: 内科
            departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          hospital:
            hospitalID: f47ac10b-58cc-4372-a567-0e02b2c3d479
            hospitalName: 東京都立大学病院
          doctorIcon: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
          email: sample@mail.com
    inline_response_200_2:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/HealthCheckup'
      example:
        data:
        - date: 2020-01-01T00:00:00.000+00:00
          bloodPressure: 120/80
          healthCheckupID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          bodyTemperature: 36.5
          medicalRecord: |-
            ## 2020年1月1日
            - 体温: 36.5
            - 血圧: 120/80
            - 診断: 軽度の風邪
        - date: 2020-01-01T00:00:00.000+00:00
          bloodPressure: 120/80
          healthCheckupID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          bodyTemperature: 36.5
          medicalRecord: |-
            ## 2020年1月1日
            - 体温: 36.5
            - 血圧: 120/80
            - 診断: 軽度の風邪
    inline_response_404_1:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: HealthCheckupNotFound
    inline_response_500_1:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
    inline_response_200_3:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Hospital'
      example:
        data:
        - address: 東京都新宿区1-1-1
          phoneNumber: 090-1234-5678
          hospitalID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          postalCode: 123-4567
          hospitalName: 東京都立大学病院
        - address: 東京都新宿区1-1-1
          phoneNumber: 090-1234-5678
          hospitalID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          postalCode: 123-4567
          hospitalName: 東京都立大学病院
    inline_response_404_2:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: HospitalNotFound
    inline_response_400_1:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: InvalidQuery
    inline_response_404_3:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: DoctorNotFound
    inline_response_200_4:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Department'
      example:
        data:
        - departmentName: 内科
          departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        - departmentName: 内科
          departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
    inline_response_200_5:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
      example:
        data:
        - doctor:
            firstName: 太郎
            lastName: 山田
            doctorID: "1234567890"
            doctorIcon: !!binary |-
              VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
              MlZ2VW9EUVJTR3Y3VlE=
          latestMessageSentAt: 2020-01-01T00:00:00Z
          chatID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          latestMessageText: "Hello, World!"
          user:
            firstName: 太郎
            lastName: 山田
            userIcon: !!binary |-
              VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
              MlZ2VW9EUVJTR3Y3VlE=
            userID: "1234567890"
        - doctor:
            firstName: 太郎
            lastName: 山田
            doctorID: "1234567890"
            doctorIcon: !!binary |-
              VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
              MlZ2VW9EUVJTR3Y3VlE=
          latestMessageSentAt: 2020-01-01T00:00:00Z
          chatID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          latestMessageText: "Hello, World!"
          user:
            firstName: 太郎
            lastName: 山田
            userIcon: !!binary |-
              VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
              MlZ2VW9EUVJTR3Y3VlE=
            userID: "1234567890"
    inline_response_200_6:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Message'
      example:
        data:
        - firstName: 太郎
          lastName: 山田
          senderID: "1234567890"
          chatID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          iconImage: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
          messageID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          sentAt: 2020-01-01T00:00:00Z
          content: "Hello, World!"
        - firstName: 太郎
          lastName: 山田
          senderID: "1234567890"
          chatID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          iconImage: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
          messageID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          sentAt: 2020-01-01T00:00:00Z
          content: "Hello, World!"
    inline_response_404_4:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: MessageNotFound
    inline_response_200_7:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FamilyEmail'
      example:
        data:
        - firstName: 太郎
          lastName: 山田
          phoneNumber: 090-1234-5678
          familyEmailID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          iconImage: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
          email: sample@sample.com
        - firstName: 太郎
          lastName: 山田
          phoneNumber: 090-1234-5678
          familyEmailID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          iconImage: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
          email: sample@sample.com
    inline_response_404_5:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: FamilyEmailNotFound
    inline_response_200_8:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Medicine'
      example:
        data:
        - quantity: 20
          medicineID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          count: 30
          medicineName: パラセタモール
        - quantity: 20
          medicineID: f47ac10b-58cc-4372-a567-0e02b2c3d479
          count: 30
          medicineName: パラセタモール
    inline_response_404_6:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: MedicineNotFound
    inline_response_200_9:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ChronicDisease'
      example:
        data:
        - diseaseName: 高血圧
          diseaseID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        - diseaseName: 高血圧
          diseaseID: f47ac10b-58cc-4372-a567-0e02b2c3d479
    inline_response_404_7:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: DiseaseNotFound
    inline_response_404_8:
      type: object
      properties:
        errorType:
          type: string
          description: エラータイプ
          example: CallReservationNotFound
    Doctor_hospital:
      type: object
      properties:
        hospitalID:
          type: string
          description: 病院UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        hospitalName:
          type: string
          description: 病院名
          example: 東京都立大学病院
      example:
        hospitalID: f47ac10b-58cc-4372-a567-0e02b2c3d479
        hospitalName: 東京都立大学病院
    Doctor_departments:
      type: object
      properties:
        departmentName:
          type: string
          description: 診療科名
          example: 内科
        departmentID:
          type: string
          description: 診療科UUID
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      example:
        departmentName: 内科
        departmentID: f47ac10b-58cc-4372-a567-0e02b2c3d479
    Chat_doctor:
      type: object
      properties:
        doctorID:
          type: string
          description: 医師ID
          example: "1234567890"
        doctorIcon:
          type: string
          description: 医師アイコン画像
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        firstName:
          type: string
          description: 医師の名
          example: 太郎
        lastName:
          type: string
          description: 医師の姓
          example: 山田
      example:
        firstName: 太郎
        lastName: 山田
        doctorID: "1234567890"
        doctorIcon: !!binary |-
          VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
          MlZ2VW9EUVJTR3Y3VlE=
    Chat_user:
      type: object
      properties:
        userID:
          type: string
          description: ユーザーID
          example: "1234567890"
        userIcon:
          type: string
          description: ユーザーアイコン画像
          format: byte
          example: !!binary |-
            VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
            MlZ2VW9EUVJTR3Y3VlE=
        firstName:
          type: string
          description: ユーザーの名
          example: 太郎
        lastName:
          type: string
          description: ユーザーの姓
          example: 山田
      example:
        firstName: 太郎
        lastName: 山田
        userIcon: !!binary |-
          VkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQmdBQUFBWUNBWUFBQURnZHozNEFBQUJqRWxFUVZSSVMr
          MlZ2VW9EUVJTR3Y3VlE=
        userID: "1234567890"
